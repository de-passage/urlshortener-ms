// Generated by CoffeeScript 1.9.3
(function() {
  var app, body_parser, db_url, express, insertNewURL, isURL, mongo, password, path, port, renderErrorPage, user;

  express = require('express');

  path = require('path');

  mongo = require('mongodb').MongoClient;

  body_parser = require('body-parser');

  app = express();

  port = process.env.PORT;

  user = process.env.DB_USER;

  password = process.env.DB_PASSWORD;

  db_url = "mongodb://" + user + ":" + password + "@ds149501.mlab.com:49501/urlshortening";

  renderErrorPage = function(err, res) {
    return res.render('index.pug', {
      error: err
    });
  };

  insertNewURL = function(db, url, id, callback) {
    var alias, urls;
    alias = id.toString(16);
    urls = db.collection('urls');
    return urls.find({
      alias: alias
    }).toArray(function(err, docs) {
      if (err) {
        return callback(err);
      } else if (docs.length > 0) {
        return insertNewURL(db, url, id + 1, callback);
      } else {
        return urls.insert({
          url: url,
          alias: alias
        }).then(function(r) {
          if (r.insertedCount === 1) {
            callback(null, alias);
            return urls.updateOne({
              count: {
                $exists: true
              }
            }, {
              $set: {
                count: id + 1
              }
            });
          } else {
            return callback({
              error: "Insertion failed"
            });
          }
        });
      }
    });
  };

  isURL = function(str) {
    return str.match(/^https?:\/\/([0-9a-zA-Z][-0-9a-zA-Z]+\.)+[0-9a-zA-Z][-0-9a-zA-Z]+(\/.*)?$/);
  };

  app.set('views', 'app/views');

  app.set('view engine', 'pug');

  app.use(body_parser.json());

  app.use(body_parser.urlencoded({
    extended: true
  }));

  app.use('/styles', express["static"](path.join(__dirname, '../../public/styles')));

  app.get("/", function(req, res) {
    var alias, error, url;
    error = req.query.error;
    alias = req.query.alias;
    url = req.query.url;
    return res.render('index.pug', {
      error: error,
      alias: alias,
      url: url
    });
  });

  app.post("/", function(req, res) {
    var alias, url;
    url = req.body.url;
    alias = req.body.alias;
    if (!(url && (alias != null))) {
      return res.redirect("/?error=" + encodeURIComponent("url or alias missing"));
    }
    if (!isURL(url)) {
      return res.redirect("/?error=invalid url " + (encodeURIComponent(url)) + ".");
    }
    return mongo.connect(db_url, function(err, db) {
      if (err) {
        return renderErrorPage(JSON.stringify(err), res);
      } else {
        return db.collection('urls').insert({
          url: url,
          alias: alias
        }, function(err) {
          if (err) {
            return renderErrorPage(err.errmsg, res);
          } else {
            return res.redirect("/?url=" + url + "&alias=" + alias);
          }
        });
      }
    });
  });

  app.get("/api/:url", function(req, res) {
    var url;
    url = req.params.url;
    if (!isURL(url)) {
      return res.json({
        error: "Invalid url " + url + ". Please make sure you have included a protocole (http or https only) and that the format is correct."
      });
    }
    return mongo.connect(db_url, function(err, db) {
      if (err) {
        return res.json(err);
      } else {
        return db.collection('urls').find({
          $or: [
            {
              count: {
                $exists: true
              }
            }, {
              url: url
            }
          ]
        }).toArray(function(err, docs) {
          var el, i, id, len;
          if (err) {
            return res.json(err);
          } else {
            id = null;
            for (i = 0, len = docs.length; i < len; i++) {
              el = docs[i];
              if (el.alias != null) {
                return res.json({
                  alias: el.alias,
                  original: url,
                  url: req.headers.host + "/" + el.alias
                });
              } else if (el.count != null) {
                id = el.count;
              }
            }
            return insertNewURL(db, url, id, function(err, al) {
              console.log(al);
              if (err) {
                return res.json(err);
              } else {
                return res.json({
                  original: url,
                  alias: al,
                  url: req.headers.host + "/" + al
                });
              }
            });
          }
        });
      }
    });
  });

  app.get("/:alias", function(req, res) {
    var alias;
    alias = req.params.alias;
    return mongo.connect(db_url, function(err, db) {
      if (err) {
        return renderErrorPage(err, res);
      } else {
        return db.collection('urls').find({
          alias: alias
        }).toArray(function(err, docs) {
          if (err || docs.length === 0) {
            return renderErrorPage(err || (alias + " is not a registered alias"), res);
          } else {
            return res.redirect(docs[0].url);
          }
        });
      }
    });
  });

  app.listen(port);

}).call(this);
